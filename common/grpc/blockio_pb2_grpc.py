# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common.grpc.blockio_pb2 as blockio__pb2


class BlockIOStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBlockLinks = channel.unary_stream(
                '/YrcfAgent.BlockIO/ListBlockLinks',
                request_serializer=blockio__pb2.ListBlockLinksRequest.SerializeToString,
                response_deserializer=blockio__pb2.ListBlockLinksResponse.FromString,
                )
        self.AddBlockLink = channel.unary_unary(
                '/YrcfAgent.BlockIO/AddBlockLink',
                request_serializer=blockio__pb2.AddBlockLinkRequest.SerializeToString,
                response_deserializer=blockio__pb2.AddBlockLinkResponse.FromString,
                )
        self.DelBlockLink = channel.unary_unary(
                '/YrcfAgent.BlockIO/DelBlockLink',
                request_serializer=blockio__pb2.DelBlockLinkRequest.SerializeToString,
                response_deserializer=blockio__pb2.DelBlockLinkResponse.FromString,
                )


class BlockIOServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListBlockLinks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBlockLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelBlockLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockIOServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListBlockLinks': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBlockLinks,
                    request_deserializer=blockio__pb2.ListBlockLinksRequest.FromString,
                    response_serializer=blockio__pb2.ListBlockLinksResponse.SerializeToString,
            ),
            'AddBlockLink': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBlockLink,
                    request_deserializer=blockio__pb2.AddBlockLinkRequest.FromString,
                    response_serializer=blockio__pb2.AddBlockLinkResponse.SerializeToString,
            ),
            'DelBlockLink': grpc.unary_unary_rpc_method_handler(
                    servicer.DelBlockLink,
                    request_deserializer=blockio__pb2.DelBlockLinkRequest.FromString,
                    response_serializer=blockio__pb2.DelBlockLinkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'YrcfAgent.BlockIO', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockIO(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListBlockLinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/YrcfAgent.BlockIO/ListBlockLinks',
            blockio__pb2.ListBlockLinksRequest.SerializeToString,
            blockio__pb2.ListBlockLinksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddBlockLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.BlockIO/AddBlockLink',
            blockio__pb2.AddBlockLinkRequest.SerializeToString,
            blockio__pb2.AddBlockLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelBlockLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.BlockIO/DelBlockLink',
            blockio__pb2.DelBlockLinkRequest.SerializeToString,
            blockio__pb2.DelBlockLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
