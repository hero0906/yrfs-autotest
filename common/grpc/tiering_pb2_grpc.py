# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tiering_pb2 as tiering__pb2


class TieringStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/AddTiering',
                request_serializer=tiering__pb2.AddTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.AddTieringResponse.FromString,
                )
        self.DeleteTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/DeleteTiering',
                request_serializer=tiering__pb2.DeleteTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.DeleteTieringResponse.FromString,
                )
        self.UpdateTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/UpdateTiering',
                request_serializer=tiering__pb2.UpdateTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.UpdateTieringResponse.FromString,
                )
        self.FlushTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/FlushTiering',
                request_serializer=tiering__pb2.FlushTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.FlushTieringResponse.FromString,
                )
        self.ListTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/ListTiering',
                request_serializer=tiering__pb2.ListTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.ListTieringResponse.FromString,
                )
        self.StatTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/StatTiering',
                request_serializer=tiering__pb2.StatTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.StatTieringResponse.FromString,
                )
        self.RecoverTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/RecoverTiering',
                request_serializer=tiering__pb2.RecoverTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.RecoverTieringResponse.FromString,
                )
        self.RecoverTieringStat = channel.unary_unary(
                '/YrcfAgent.Tiering/RecoverTieringStat',
                request_serializer=tiering__pb2.RecoverTieringStatRequest.SerializeToString,
                response_deserializer=tiering__pb2.RecoverTieringStatResponse.FromString,
                )
        self.ScanTiering = channel.unary_unary(
                '/YrcfAgent.Tiering/ScanTiering',
                request_serializer=tiering__pb2.ScanTieringRequest.SerializeToString,
                response_deserializer=tiering__pb2.ScanTieringResponse.FromString,
                )
        self.SetTieringMode = channel.unary_unary(
                '/YrcfAgent.Tiering/SetTieringMode',
                request_serializer=tiering__pb2.SetTieringModeRequest.SerializeToString,
                response_deserializer=tiering__pb2.SetTieringModeResponse.FromString,
                )


class TieringServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverTieringStat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanTiering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTieringMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TieringServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTiering,
                    request_deserializer=tiering__pb2.AddTieringRequest.FromString,
                    response_serializer=tiering__pb2.AddTieringResponse.SerializeToString,
            ),
            'DeleteTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTiering,
                    request_deserializer=tiering__pb2.DeleteTieringRequest.FromString,
                    response_serializer=tiering__pb2.DeleteTieringResponse.SerializeToString,
            ),
            'UpdateTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTiering,
                    request_deserializer=tiering__pb2.UpdateTieringRequest.FromString,
                    response_serializer=tiering__pb2.UpdateTieringResponse.SerializeToString,
            ),
            'FlushTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushTiering,
                    request_deserializer=tiering__pb2.FlushTieringRequest.FromString,
                    response_serializer=tiering__pb2.FlushTieringResponse.SerializeToString,
            ),
            'ListTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTiering,
                    request_deserializer=tiering__pb2.ListTieringRequest.FromString,
                    response_serializer=tiering__pb2.ListTieringResponse.SerializeToString,
            ),
            'StatTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.StatTiering,
                    request_deserializer=tiering__pb2.StatTieringRequest.FromString,
                    response_serializer=tiering__pb2.StatTieringResponse.SerializeToString,
            ),
            'RecoverTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverTiering,
                    request_deserializer=tiering__pb2.RecoverTieringRequest.FromString,
                    response_serializer=tiering__pb2.RecoverTieringResponse.SerializeToString,
            ),
            'RecoverTieringStat': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverTieringStat,
                    request_deserializer=tiering__pb2.RecoverTieringStatRequest.FromString,
                    response_serializer=tiering__pb2.RecoverTieringStatResponse.SerializeToString,
            ),
            'ScanTiering': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanTiering,
                    request_deserializer=tiering__pb2.ScanTieringRequest.FromString,
                    response_serializer=tiering__pb2.ScanTieringResponse.SerializeToString,
            ),
            'SetTieringMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTieringMode,
                    request_deserializer=tiering__pb2.SetTieringModeRequest.FromString,
                    response_serializer=tiering__pb2.SetTieringModeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'YrcfAgent.Tiering', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tiering(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/AddTiering',
            tiering__pb2.AddTieringRequest.SerializeToString,
            tiering__pb2.AddTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/DeleteTiering',
            tiering__pb2.DeleteTieringRequest.SerializeToString,
            tiering__pb2.DeleteTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/UpdateTiering',
            tiering__pb2.UpdateTieringRequest.SerializeToString,
            tiering__pb2.UpdateTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlushTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/FlushTiering',
            tiering__pb2.FlushTieringRequest.SerializeToString,
            tiering__pb2.FlushTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/ListTiering',
            tiering__pb2.ListTieringRequest.SerializeToString,
            tiering__pb2.ListTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/StatTiering',
            tiering__pb2.StatTieringRequest.SerializeToString,
            tiering__pb2.StatTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/RecoverTiering',
            tiering__pb2.RecoverTieringRequest.SerializeToString,
            tiering__pb2.RecoverTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverTieringStat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/RecoverTieringStat',
            tiering__pb2.RecoverTieringStatRequest.SerializeToString,
            tiering__pb2.RecoverTieringStatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScanTiering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/ScanTiering',
            tiering__pb2.ScanTieringRequest.SerializeToString,
            tiering__pb2.ScanTieringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTieringMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/YrcfAgent.Tiering/SetTieringMode',
            tiering__pb2.SetTieringModeRequest.SerializeToString,
            tiering__pb2.SetTieringModeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
